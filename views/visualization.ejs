<!DOCTYPE html>
<html>

<head>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/randomcolor/0.5.2/randomColor.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.11/p5.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.11/addons/p5.dom.min.js"></script>

  <link href="https://fonts.googleapis.com/css?family=Work+Sans:100,700" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Roboto:400,700" rel="stylesheet">

  <title>
    <%= title %>
  </title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body>
  <!-- <div id="canvasDiv"></div> -->
  <div id="box">
    <div class="cat">
      <div class="head">
        <div class="ears">
          <div class="ear left"></div>
          <div class="ear right"></div>
        </div>
        <div class="eyes">
          <div class="eye left"></div>
          <div class="eye right"></div>
        </div>
        <div class="muzzle">
          <div class="nose"></div>
        </div>
      </div>
      <div class="body">
        <div class="paw"></div>
      </div>
      <div class="tail">
        <div class="tail-segment">
          <div class="tail-segment">
            <div class="tail-segment">
              <div class="tail-segment">
                <div class="tail-segment">
                  <div class="tail-segment">
                     <div class="tail-segment">
                      <div class="tail-segment">
                        <div class="tail-segment">
                          <div class="tail-segment">
                            <div class="tail-segment">
                              <div class="tail-segment">
                                <div class="tail-segment">
                                  <div class="tail-segment">
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="t1">
    <a id="username">
      <%= u %>
    </a><a>'s spawtify</a>
    <span class="tooltiptext">
      <p>The <b>backgound</b> of your musicScape is a <a id="valenceColorType"></a> color (<a id="valenceColor"></a>) because you've recently listened to music that relates to <b id="valenceString"></b> emotions.</p>
      <p>Your cat's <b id="eyes"></b> are a <a id="modeType"></a> color (<a id="modeColor"></a>) because your recent music is mostly in <b id="mode"></b> mode.</p>
      <p>Your cat is <a id="energy"></a> sleepy because you've listened to <b><a id="energy1"></a> energetic</b> songs.</p>
      <p>You've been <b><a id="listener"></a> listener</b> during the past 24 hours, so your cat has <a id="numToys"></a> toy.</p>
      <p>The cat's <b>fur</b> are tones of <a id="keyColor"></a> because your songs are mostly in the <b>key</b> <a id="keyName"><a>.</p>
    </span>
  </div>
<!-- </body> -->

<style>

#box {
  display: block;
  height: 100%;
  width: 100%;
}
.cat * {
  text-align: center;
  margin-left: auto;
  margin-right: auto;
}
.cat, .ears, .eyes, .muzzle, .body, .paw, .tail, .tail-segment {position: relative;}
.head, .body, .paw, .tail-segment {background-color: #000000;}
.left {float: left;}
.right {float: right;}
.cat {
  margin-top: 50px;
  animation: purr 5s infinite cubic-bezier(0,.75,1,.25);
}
.head {
  width: 100px;
  height: 90px;
  border-radius: 50%;
  z-index: 100;
  animation: head-bob 5s infinite ease-in-out;
}
.ears {
  top: -20px;
  z-index: -100;
}
.ear {
  width: 0;
  height: 0;
  border-left: 25px solid transparent;
  border-right: 25px solid transparent;
  border-bottom: 50px solid #000000;
}
.ear.left {
  transform: rotate(-20deg) translateX(-10px);
}
.ear.right {
  transform: rotate(20deg) translateX(10px);
}
.eyes {
  top: -18px;
  width: 60%;
}
.eye {
  width: 16px;
  height: 16px;
  border-radius: 50%;
  background-color: #FFD700;
  animation: eye-blink 5s infinite;
  text-align: center;
}

.muzzle {
  top: 50px;
}
.nose {
  width: 0;
  height: 0;
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-top: 10px solid #666666;
}
.body {
  width: 200px;
  height: 120px;
  border-top-left-radius: 200px;
  border-top-right-radius: 200px;
  top: -75px;
  left: 90px;
  z-index: -10;
}
.paw {
  height: 30px;
  width: 50px;
  border-radius: 25px;
  left: -100px;
  top: 90px;
}
.tail {
  left: 180px;
  top: -100px;
  transform: rotate(90deg);
  
}

.tail-segment {
  height: 20px;
  width: 30px;
  border-radius: 25px;
  top: 0px;
  left: 10px;
  /*transform: rotate(10deg);*/
  animation: tail-swish 5s infinite cubic-bezier(.8,0,.2,1);
}

@keyframes tail-swish {
  0% {transform: rotate(12deg);}
  10% {transform: rotate(12deg);}
  40% {transform: rotate(-5deg);}
  50% {transform: rotate(5deg);}
  60% {transform: rotate(-5deg);}
  100% {transform: rotate(12deg);}
}

@keyframes head-bob {
  0% {transform: translateX(-15px) translateY(45px);}
  10% {transform: translateX(-15px) translateY(45px);}
  30% {transform: translateX(0) translateY(0);}
  75% {transform: translateX(0) translateY(0);}
  90% {transform: translateX(-15px) translateY(45px);}
  100% {transform: translateX(-15px) translateY(45px);}
}

@keyframes eye-blink {
  0% {transform: scaleY(0);}
  10% {transform: scaleY(0);}
  15% {transform: scaleY(1);}
  48% {transform: scaleY(1);}
  50% {transform: scaleY(0);}
  52% {transform: scaleY(1);}
  90% {transform: scaleY(1);}
  95% {transform: scaleY(0);} 
  100% {transform: scaleY(0);}  
}

@keyframes purr {
  0% {left: -1px;}
  1% {left: 0px;}
  2% {left: -1px;}
  3% {left: 0px;}
  4% {left: -1px;}
  5% {left: 0px;}
  6% {left: -1px;}
  7% {left: 0px;}
  8% {left: -1px;}
  9% {left: 0px;}
  10% {left: -1px;}
  11% {left: 0px;}
  12% {left: -1px;}
  13% {left: 0px;}
  14% {left: -1px;}
  15% {left: 0px;}
  16% {left: -1px;}
  17% {left: 0px;}
  18% {left: -1px;}
  19% {left: 0px;}
  20% {left: -1px;}
  21% {left: 0px;}
  94% {left: 0px;}
  95% {left: -1px;}
  96% {left: 0px;}
  97% {left: -1px;}
  98% {left: 0px;}
  99% {left: -1px;}
  100% {left: 0px;}
}
</style>

<script>
  // Fade in on start
  $(document).ready(function() {
    $("body").hide().fadeIn(2000);
  });

  if (/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)) {
    var canvasW = 800;
    var canvasH = 800;
  } else {
    var canvasW = 960;
    var canvasH = 360;
  }

  var Y_AXIS = 1;
  var X_AXIS = 2;

  ////////// MUSIC VARIABLES ////////////
  var mode = '<%= d.mode %>';
  var valence = '<%= d.valence %>';
  var energy = '<%= d.energy %>';
  var toyN = '<%= t %>'; // can be 0,1,2
  var musicKey = '<%= d.key %>'; // from 0 to 11


  //////////////////////////////////////

  //var musicHues = ['monochrome', 'blue', 'green', 'purple', 'pink', 'red', 'orange', 'yellow'];
//   var musicKHues = ['yellow', 'yellow', 'orange', 'red', 'red', 'pink', 'pink', 'purple', 'blue', 'blue', 'green', 'green'];
//   var musicLums = ['light', 'bright', 'bright', 'bright', 'light', 'bright', 'light', 'bright', 'bright', 'light', 'bright', 'light'];
//   var keyNames = ["C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B"];

  var sunColors = [];
  var sunSize;
  var sunRange;
  var sunPos;

  var landColors;

  var backgroundColor1;
  var backgroundColor2;

  /// 

  var valenceColor;
  var valenceColorType;
  var modeType;
  var modeColor;
  var musicHues = ['monochrome', 'blue', 'green', 'purple', 'pink', 'red', 'orange', 'yellow'];
  var musicKHues = ['yellow', 'yellow', 'orange', 'red', 'red', 'pink', 'pink', 'purple', 'blue', 'blue', 'green', 'green'];
  var musicLums = ['light', 'bright', 'bright', 'bright', 'light', 'bright', 'light', 'bright', 'bright', 'light', 'bright', 'light'];
  var keyNames = ["C", "C♯/D♭", "D", "D♯/E♭", "E", "F", "F♯/G♭", "G", "G♯/A♭", "A", "A♯/B♭", "B"];
  var furColors;
  var backgroundColor;

  /////////////////////////////////////


  function setup() {

    // VALENCE -- background color
    if (valence > 0.5) {
        valenceColor = randomColor({luminosity:'bright'});
        valenceColorType = "brighter";
    } else {
        valenceColor = randomColor({luminosity:'dark'});
        valenceColorType = "dimmer";
    }

    // MODE -- eye color
    if (mode == 1) {
      // Major mode --- warmer toned
      modeType = "warmer-toned";
      modeColor = musicHues[(Math.floor(Math.random() * (7 - 4 + 1)) + 4)];
    } else if (mode == 0) {
      // Minor mode --- cooler toned
      modeType = "cooler-toned";
      modeColor = musicHues[(Math.floor(Math.random() * (3 - 0 + 1)) + 0)];
    }

    // FOR THE TOOLTIP
    document.getElementById("valenceColor").innerText = valenceColor.toString();
    document.getElementById("valenceColor").style.color = backgroundColor1;
    if (valence > 0.5)
      document.getElementById("valenceString").innerText = "happy or cheerful";
    else
      document.getElementById("valenceString").innerText = "sad or angry";

    if (energy > 0.5) {
      document.getElementById("energy").innerText = "less";
      document.getElementById("energy1").innerText = "more";
    } else {
      document.getElementById("energy").innerText = "more";
      document.getElementById("energy1").innerText = "less";
    }

    // KEY --- fur colors
    var currentHue = musicKHues[musicKey];
    var currentLum = musicLums[musicKey];

    furColors = randomColor({
      hue: currentHue,
      luminosity: currentLum,
      count: 5,
      format: 'rgba',
      alpha: 0.5
    });

    // FOR THE TOOLTIP
    document.getElementById("keyColor").innerText = currentLum.toString() + " " + currentHue.toString();
    document.getElementById("keyColor").style.color = furColors[0];
    document.getElementById("keyName").innerText = keyNames[musicKey];

    // LISTENS PER HOUR --- number of toys
    if (toyN == 2) {
      toyN = 0;
      document.getElementById("listener").innerText = "a less active";
      document.getElementById("numToys").innerText = "one";
    } else if (toyN == 0) {
      toyN = 2;
      document.getElementById("listener").innerText = "a very active";
      document.getElementById("numToys").innerText = "three";
    } else if (toyN == 1) {
      document.getElementById("listener").innerText = "an active";
      document.getElementById("numToys").innerText = "two";
    }


    // // Canvas element
    // var canvas = createCanvas(canvasW, canvasH);
    // var div = document.createElement("div");
    // document.getElementById("canvasDiv").appendChild(div);
    // div.style.margin = "auto";
    // div.appendChild(document.getElementById("defaultCanvas0"));

    // Background
    backgroundColor = color(valenceColor);
    setColor(backgroundColor);
  }

//   /// Gradient function
//   function setGradient(x, y, w, h, c1, c2, axis) {
//     noFill();
//     if (axis == Y_AXIS) { // Top to bottom gradient
//       for (var i = y; i <= y + h; i++) {
//         var inter = map(i, y, y + h, 0, 1);
//         var c = lerpColor(c1, c2, inter);
//         stroke(c);
//         line(x, i, x + w, i);
//       }
//     } else if (axis == X_AXIS) { // Left to right gradient
//       for (var i = x; i <= x + w; i++) {
//         var inter = map(i, x, x + w, 0, 1);
//         var c = lerpColor(c1, c2, inter);
//         stroke(c);
//         line(i, y, i, y + h);
//       }
//     }
//   }

//   function sun() {
//     noStroke();
//     var sunColor = sunColors[0];
//     sunPos = [random(20, width), random(20, (height / 2) - 50)];
//     for (i = sunSize; i > 0; i -= sunRange) {
//       fill(sunColor);
//       sunColor = lerpColor(color(sunColor), color(sunColors[1]), .25);
//       ellipse(sunPos[0], sunPos[1], i);
//     }
//   }

//   function stars() {
//     noStroke();
//     fill(randomColor({
//       luminosity: 'light'
//     }));
//     for (i = 0; i < width; i += random(10, 100)) {
//       for (j = 0; j < height; j += random(10, 200)) {
//         ellipse(i, j, random(1, 4));
//       }
//     }
//   }

//   function makeLand(level, landColor) {

//     // mountains based on this openprocessing sketch: https://www.openprocessing.org/sketch/179401

//     noStroke();
//     fill(landColor);
//     stroke(landColor);
//     strokeWeight(2);
//     noLoop();

//     var yInit = 6 * height / 7; //initial  y
//     var repetition = level / 4;

//     var yArray = [];
//     for (var j = 0; j < 4; j++) {
//       yArray[4 - j] = yInit;
//       yInit -= repetition / pow(1.2, j);
//     }

//     var dx = 0;

//     // Only two mountains at a time
//     for (var j = 1; j < 3; j++) {

//       var n1 = random(-height / 2, height / 2);
//       var n2 = random(-height / 2, height / 2);

//       var n3 = random(2, 4);

//       var n4 = map(energy, 0.0, 1.0, 5, 100);

//       var n5 = random(-width / 2, width / 2);

//       var n6 = map(energy, 0.0, 1.0, 0.15, 3);

//       for (var x = 0; x < width; x++) {

//         var y = yArray[j];
//         y += 10 * j * sin(2 * dx / j + n1);
//         y += n3 * j * sin(5 * dx / j + n2);
//         y += n4 * j * noise(n6 * dx / j + n5);
//         y += 1.7 * j * noise(10 * dx);

//         line(x, y, x, height);

//         dx += 0.02;
//       }
//     }
//   }

//   function makeSky(level) {
//     noStroke();
//     fill(getRandomColor());
//     noLoop();
//     var amount = width;
//     var frequency = random(1.0) / 50;
//     var offset = random(200) + 5;
//     var startY = level;
//     beginShape();
//     vertex(0, startY);
//     for (var c = 1; c < amount; c++) {
//       var sinoffset = sin(frequency * c);
//       var sinX = c * (width / amount);
//       var sinY = startY * random(1.5) + (sinoffset * offset);
//       bezierVertex(sinX, sinY, sinX, sinY - 1, sinX, sinY);
//     }

//     vertex(width, height);
//     vertex(0, height);
//     endShape();
//   }

//   function draw() {

//     //makeSky(canvasH);

//     // NIGHT
//     if (mode == 0)
//       stars();

//     //skyRipples();

//     sun();

//     // Number of lands depends on how many songs we've listened to in the past hours
//     if (landN == 2) {
//       makeLand(4 * canvasH / 6, landColors[3]);
//     }
//     makeLand(canvasH / 2, landColors[0]);
//     if (landN >= 1) {
//       makeLand(random(1, 2) * canvasH / 6, landColors[1]);
//     }

//   }


//   // Other tests with interesting graphics but not used right now :)

//   function getRandomColor() {

//     var c = color(random(255), random(255), random(255), random(255));
//     return c;

//   }

//   function skyRipples() {
//     stroke(randomColor({
//       format: 'rgba'
//     }));
//     fill(randomColor({
//       format: 'rgba'
//     }));
//     var ellipseR = random(40, 100);
//     for (i = 0; i < width + ellipseR; i += 20) {
//       for (j = 0; j < height; j += 20) {
//         ellipse(i, j, ellipseR);
//       }
//     }
//   }

//   function makeRibbons() {
//     noFill();
//     smooth(8);
//     noLoop();

//     for (var i = 0; i < random(10) + 2; i++) {

//       var strokeW = random(5) + 3;

//       var amount = 500;
//       var frequency = random(1.0) / 15;
//       var offset = random(200) + 5;

//       var col = getRandomColor();

//       strokeWeight(strokeW);
//       stroke(col, 180);
//       var startY = height / 2;
//       beginShape();
//       curveVertex(canvasH / 3, startY);
//       for (var c = 1; c < amount; c++) {
//         var sinoffset = sin(frequency * c);
//         var sinX = c * (width / amount);
//         var sinY = startY + (sinoffset * offset);
//         bezierVertex(sinX, sinY, sinX, sinY - 1, sinX, sinY);
//       }
//       endShape();

//     }
//   }
</script>

</html>
